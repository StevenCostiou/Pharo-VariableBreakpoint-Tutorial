# Variable breakpoints: warmup## SummaryIn this tutorial, you will learn to use the Pharo variable breakpoints. **What is a variable breakpoint?**A variable breakpoint interrupts an execution whenever a target variable is read or written.The breakpoint then opens a debugger on that variable access to let you inspect the state of your program.We can target the instance variables of a class or a temporary variable in a method.We can configure the breakpoint to trigger only for variable reads, for variable writes, or for both.**When to use variable breakpoints?**Typically, we want to break on variable access when we need to track usage or modifications of that variable throughout our program's execution.A variable may be read and written in many places in the code.Expressing a breakpoint on that variable's accesses provides many advantages:* you avoid manually putting breakpoints everywhere that variable is accessed* you will not miss any occurrence of that variable's usage* the execution is only interrupted on that variable's accesses: you can debug with a focus on  that variable's life**What is in this tutorial?**In the following, we will learn how to configure variable breakpoints and to use them through examples. ## Typical usecase: breaking when an instance variable is written toWe will use the example class `VBTExamplePerson` (click on it to open) which represent a person.Instances of this class have a name and an age. Both are instance variables.Let us imagine that we want to interrupt the execution when someone modifies the age of a person.**Installing the variable breakpoint**The first step is to select the ```age``` instance variable of our class and to configure a *break on write* breakpoint.Let's open a class browser by clicking on `VBTExamplePerson`.There, we will apply the following steps, as depicted in the image below:1. select the `VBTExamplePerson` class2. select the variable (`vars`) view3. select the ```age``` variable in the variable list4. right click on that variable and in the menu selec *Break on write*![nst-var-break-on-write](https://github.com/StevenCostiou/Pharo-VariableBreakpoint-Tutorial/raw/main/pictures/inst-var-break-on-write.png)Once we performed these steps, the breakpoint is installed on the variable.All methods writing the ```age``` variable now have a red icon signifying that a breakpoint is installed on the variable write:![break-on-write-view](https://github.com/StevenCostiou/Pharo-VariableBreakpoint-Tutorial/raw/main/pictures/installed-breakpoint-view.png)**Creating a person object and modifying its age**We will  now create an instance of `VBTExamplePerson`  and modify the age of that person object.Open a playground using the Pharo top menu: _Browse -> Playground_.Copy/paste the following code, then click _Do It_ in the toolbar.```VBTExamplePerson new age: 15```We observe that a debugger opens when the executions tries to write the given age (15) into the ```age``` instance  variable of the person.Using this breakpoint, we can monitor and debug at the moment where an instance variable is modified.**Removing the breakpoint (shortcut)**Removing a variable breakpoint is straightforward, and similar to removing standard breakpoints.Just select a method in which the target variable is accessed. Here, we select the ```age:``` method where the ```age``` instance variable is modified.In the gutter, facing the instruction where the variable is modified, move your mouse over the red bubble and the breakpoint appears (like in the picture below).Click on that breakpoint to uninstall it.The breakpoint will automatically uninstall from all methods in which it was installed, *i.e.*, all methods in which the ```age``` instance variable is accessed in write mode.![remove-breakpoint-shortcut](https://github.com/StevenCostiou/Pharo-VariableBreakpoint-Tutorial/raw/main/pictures/removing-breakpoint-shortuct.png)## Breaking when any instance variable of a class is accessedIn this scenario, we are interested in interrupting the execution when any instance variable defined in a target class is read or written.Basically, we want to open a debugger whenever the state of the instances of that target class are accessed.We do that in two steps, as illustrated in the example from the picture below:1. we browse the  `VBTExamplePerson` class2. we do a right click, and in the menu we select **Break on all variable accesses**![class-break-on-all-inst-var-accesses](https://github.com/StevenCostiou/Pharo-VariableBreakpoint-Tutorial/raw/main/pictures/class-break-on-all-inst-var-accesses.png)Let us  now create an instance of `VBTExamplePerson`  and execute a method accessing multiple instance variables of that instance.Open a playground using the Pharo top menu: *Browse -> Playground*.Copy/paste the following code, then click *Do It* in the toolbar.```VBTExamplePerson new name: 'Jeanne'; age: 15; printPerson```When executing that code, the execution will be interrupted at the first read or write access to an instance variable of our person object.If you click **proceed** each time, you will see that for every read or write to an instance variable, the execution interrupts again.Using this breakpoint, we can monitor and debug every access to the state of the instances of a particular class.## Breaking when a temporary variable of a method is writtenThe variable breakpoints also works on temporary variable.First,  make sure that you uninstalled the breakpoint of the previous step: browse the `VBTExamplePerson>>#printPerson` (just click on it).Click on the red circles in the gutter to uninstall every breakpoint from this method.When all circles disappeared, all breakpoints are uninstalled.It is common that many red circles disappear at once, when they are in fact the same breakpoint installed on many variables (_e.g._, on all reads of a variable).Now, in this same method we will put a variable breakpoint on the `str` temporary variable (the stream).We apply the following steps, as depicted in the image below:1. make sure we are browsing the  `VBTExamplePerson` class (normally you are already on it)2. make sure we are browsing the  `VBTExamplePerson>>#printPerson` method (normally you are already on it)3. select the ```str``` variable in the code pane (any one of them)4.  right click on that selection, and in the menu select _debugging -> Break on writes to str_Notice that the contextual menu recognises the selected variable, and tells you its name so that you know on which variable you are installing the breakpoint.![temp-var-break-on-write](https://github.com/StevenCostiou/Pharo-VariableBreakpoint-Tutorial/raw/main/pictures/temp-var-break-on-write.png)Execute again this code with a **Do it** in the playground. The execution will interrupt each time you write something into that temporary variable.```VBTExamplePerson new name: 'Jeanne'; age: 15; printPerson```Using this breakpoint, we can monitor and debug every access to the local state of a method, by interrupting the execution each time a temporary variable is read or written.## Exploring and managing breakpoints
# Exercise: debugging with object-centric variable breakpoints: ## SummaryAn error in a unit tests prevent this test to pass.In this test, we test multiple objects of the same class. The state of one of these objects seems to be erratic.Our task is to debug this test,  and for that we will use object-centric variable breakpoints to investigate when the state of that particular buggy object is modified.This task is an exercise. It is therefore voluntarily simplistic, but you will try to debug it with variable breakpoints as if it was a real task.##Â Finding where a particular object state is modifiedWhen executing the test `VBTAlignmentTest>>#testSingleObjectFailingAlignment`, there is an failing assertion that prevents the test to pass.Let's execute this test. You should see a debugger:![test-failure](https://github.com/StevenCostiou/Pharo-VariableBreakpoint-Tutorial/raw/main/pictures/has-shapes-failure.png)As we can see, there are two instances of `VBTAlignment2` created at the beggining.The first two assertions pass, and show that after initialization none of these instances have shapes.Then the message `addRandomShapes` is sent to both objects.The test fails because the second objects answers _false_ to the  `hasShape` message, despite the fact that we just added random shapes to that object!Only the `align2` object is buggy, and not `align1`.To understand why the `shapes` instance variable of that particular object does not have the correct value, let us install a variable breakpoint on the `shapes` instance variable but scoped to the `align2` instance:* Restart the test* Step over the first two assignments, so that `align1` and `align2` are instantiated (this is necessary to first create the objects)* Inspect the `align2` object, right-click on its `shapes` variable and select `halt on write`* Proceed the testThe execution will break when the `shapes` instance variable of the specific object `align2` is written to, and you can navigate the stack to find the problem and fix the test!Notice that it does not break for writes to the `shapes` instance variable of `align1`.The variable breakpoint we installed is scoped to the `align2` object because we defined it from an inspector opened on that object.
